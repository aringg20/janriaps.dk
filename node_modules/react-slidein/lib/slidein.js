"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var TransitionGroup = require("react-transition-group/TransitionGroup");
var SlideInContent = (function (_super) {
    __extends(SlideInContent, _super);
    function SlideInContent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleRef = function (element) {
            _this.element = element;
            _this.callbacks = [];
        };
        _this.handleTransitionEnd = function (evt) {
            if ((evt.target === _this.element) && (evt.propertyName === 'height')) {
                var callback = _this.callbacks.shift();
                callback && callback();
                if (_this.callbacks.length === 0) {
                    _this.element.classList.remove('transitioning');
                    _this.element.style.transitionProperty = 'none';
                    _this.element.style.height = _this.props.closed ? '0px' : 'auto';
                    if (_this.props.closed)
                        _this.element.classList.add('closed');
                }
            }
        };
        return _this;
    }
    SlideInContent.prototype.componentDidMount = function () {
        if (this.props.closed)
            this.element.classList.add('closed');
    };
    SlideInContent.prototype.componentWillAppear = function (callback) {
        if (this.props.transitionOnAppear) {
            this.callbacks.push(callback);
            this.startTransition('0px');
        }
        else {
            this.element.style.height = this.props.closed ? '0px' : 'auto';
            callback();
        }
    };
    SlideInContent.prototype.componentWillEnter = function (callback) {
        this.callbacks.push(callback);
        var prevHeight = this.element.getBoundingClientRect().height + 'px';
        this.startTransition(prevHeight);
    };
    SlideInContent.prototype.componentWillLeave = function (callback) {
        this.callbacks.push(callback);
        this.element.classList.add('transitioning');
        this.element.style.height = getComputedStyle(this.element).height;
        this.element.offsetHeight;
        this.element.style.transitionProperty = 'height';
        this.element.style.height = '0px';
    };
    SlideInContent.prototype.componentWillUpdate = function () {
        if (this.callbacks.length === 0) {
            this.element.style.height = this.element.getBoundingClientRect().height + 'px';
        }
    };
    SlideInContent.prototype.componentDidUpdate = function () {
        var callback = this.callbacks.shift();
        callback && callback();
        if (this.callbacks.length === 0) {
            var prevHeight = getComputedStyle(this.element).height;
            this.startTransition(prevHeight);
        }
    };
    SlideInContent.prototype.startTransition = function (prevHeight) {
        var endHeight = '0px';
        if (!this.props.closed) {
            this.element.classList.remove('closed');
            this.element.style.height = 'auto';
            endHeight = getComputedStyle(this.element).height;
        }
        if (parseFloat(endHeight).toFixed(2) !== parseFloat(prevHeight).toFixed(2)) {
            this.element.classList.add('transitioning');
            this.element.style.height = prevHeight;
            this.element.offsetHeight;
            this.element.style.transitionProperty = 'height';
            this.element.style.height = endHeight;
        }
    };
    SlideInContent.prototype.render = function () {
        var className = this.props.className ?
            'react-slidein ' + this.props.className : 'react-slidein';
        return (React.createElement("div", { className: className, ref: this.handleRef, onTransitionEnd: this.handleTransitionEnd }, this.props.children));
    };
    return SlideInContent;
}(React.Component));
SlideInContent.defaultProps = {
    transitionOnAppear: true,
    closed: false
};
function SlideInWrapper(props) {
    var childrenArray = React.Children.toArray(props.children);
    return childrenArray[0] || null;
}
function SlideIn(props) {
    var children = props.children, attrs = __rest(props, ["children"]);
    var hasContent = (children && React.Children.count(children) !== 0);
    return (React.createElement(TransitionGroup, { component: SlideInWrapper }, hasContent && React.createElement(SlideInContent, __assign({ key: 'content' }, attrs), children)));
}
exports.SlideIn = SlideIn;
//# sourceMappingURL=slidein.js.map